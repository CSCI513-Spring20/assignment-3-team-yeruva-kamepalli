import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Fibonacci extends Task {

    public Fibonacci(int first, int last) {
        super("");
        FibinocciNum = new ArrayList<Integer>();
        this.first = first;
        this.last = last;
    } 
    public static void fibinocci(int n) {
    	FibinocciNum.clear();
    		 int t1 = 0, t2 = 1;
    	  

    	        for (int i = 1; i <= n; ++i)
    	        {
    	            
    	        	FibinocciNum.add(t1);
    	            int sum = t1 + t2;
    	            t1 = t2;
    	            t2 = sum;
    	        }    	   
    }
  
    @Override
    public void run() {
    	 System.out.println(this.getTask() +"\t"+ Thread.currentThread().getName()+"started running");
         fibinocci(last);
         System.out.println( this.getTask() +"\t" +"Fibb numbers generated are: " + Arrays.toString(FibinocciNum.toArray()) );
         System.out.println( this.getTask() + "\t" + FibinocciNum.size() + " Fibb numbers generated by " + Thread.currentThread().getName()); 
    }
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        System.out.print("Enter the upper bound of input range: ");
        int upper = input.nextInt();
        
 

        ThreadPooling threadPool = new ThreadPooling(10);
      
        int k = (int) Math.ceil(upper / 10);

        ArrayList<Fibonacci> tasks = new ArrayList<Fibonacci>();
        int lower = 0;

        for(int upperlimit = (lower + k); upperlimit <= upper; upperlimit = lower + k)
        {
            Fibonacci task = new Fibonacci(lower, upperlimit - 1);
           threadPool.taskexecution(task);
            tasks.add(task);
            lower = upperlimit;


        }
        threadPool.shutdown();
        input.close();
    }
    private int first,last;
    private static ArrayList<Integer> FibinocciNum;
    String taskname;
    boolean isCompleted;
}
